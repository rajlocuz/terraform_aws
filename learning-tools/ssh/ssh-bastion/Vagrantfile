# -*- mode: ruby -*-
# vi: set ft=ruby :

# Specify Vagrant version, Vagrant API version, and Vagrant clone location
Vagrant.require_version '>= 1.6.0'
VAGRANTFILE_API_VERSION = '2'

# Require 'yaml' module
require 'yaml'

# Read YAML file with VM details (box, CPU, and RAM)
machines = YAML.load_file(File.join(File.dirname(__FILE__), 'machines.yml'))

# Create and configure the VMs
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # Always use Vagrant's default insecure key
  config.ssh.insert_key = false

  # Iterate through entries in YAML file to create VMs
  machines.each do |machine|
    config.vm.define machine['name'] do |srv|

      # Don't check for box updates
      srv.vm.box_check_update = false
      srv.vm.hostname = machine['name']
      srv.vm.box = machine['vmw_box']

      # Configure default synced folder (disable by default)
      if machine['sync_disabled'] != nil
        srv.vm.synced_folder '.', '/vagrant', disabled: machine['sync_disabled']
      else
        srv.vm.synced_folder '.', '/vagrant', disabled: true
      end #if machine['sync_disabled']

      # Assign additional private network, if specified in machines.yml
      if machine['ip_addr'] != nil
        srv.vm.network 'private_network', ip: machine['ip_addr']
      end # if machine['ip_addr']

      # Configure CPU & RAM per settings in machines.yml (Fusion)
      srv.vm.provider 'vmware_fusion' do |vmw|
        vmw.vmx['memsize'] = machine['ram']
        vmw.vmx['numvcpus'] = machine['vcpu']
        if machine['nested'] == true
          vmw.vmx['vhv.enable'] = 'TRUE'
        end #if machine['nested']
      end # srv.vm.provider vmware_fusion

      # Configure CPU & RAM per settings in machines.yml (VirtualBox)
      srv.vm.provider 'virtualbox' do |vb, override|
        vb.memory = machine['ram']
        vb.cpus = machine['vcpu']
        override.vm.box = machine['vb_box']
      end # srv.vm.provider virtualbox

      # Provision key pairs according to VM name
      # If 'client' VM, copy in all keys
      if machine['name'] == 'client'
        srv.vm.provision 'file', source: 'bastion_rsa', 
          destination: '/home/vagrant/.ssh/bastion_rsa'
        srv.vm.provision 'file', source: 'bastion_rsa.pub', 
          destination: '/home/vagrant/.ssh/bastion_rsa.pub'
        srv.vm.provision 'file', source: 'remote_rsa', 
          destination: '/home/vagrant/.ssh/remote_rsa'
        srv.vm.provision 'file', source: 'remote_rsa.pub', 
          destination: '/home/vagrant/.ssh/remote_rsa.pub'
        srv.vm.provision 'file', source: 'client-ssh-config',
          destination: '/home/vagrant/.ssh/config'
      end # if 'client'

      # If 'bastion' VM, echo bastion_rsa.pub to authorized_keys
      if machine['name'] == 'bastion'
        srv.vm.provision 'file', source: 'bastion_rsa.pub', 
          destination: '/home/vagrant/bastion_rsa.pub'
        srv.vm.provision 'shell', 
          inline: 'cat /home/vagrant/bastion_rsa.pub >> /home/vagrant/.ssh/authorized_keys'
        srv.vm.provision 'shell', inline: 'rm /home/vagrant/bastion_rsa.pub'
        srv.vm.provision 'file', source: 'bastion-hosts',
          destination: '/home/vagrant/bastion-hosts'
        srv.vm.provision 'shell',
          inline: 'cat /home/vagrant/bastion-hosts >> /etc/hosts', privileged: 'true'
        srv.vm.provision 'shell', inline: 'rm /home/vagrant/bastion-hosts'
      end # if 'bastion'

      # If 'remote1' VM, echo remote_rsa.pub to authorized_keys
      if machine['name'] == 'remote1'
        srv.vm.provision 'file', source: 'remote_rsa.pub', 
          destination: '/home/vagrant/remote_rsa.pub'
        srv.vm.provision 'shell', 
          inline: 'cat /home/vagrant/remote_rsa.pub >> /home/vagrant/.ssh/authorized_keys'
        srv.vm.provision 'shell', inline: 'rm /home/vagrant/remote_rsa.pub'
      end # if 'remote1'

      # If 'remote2' VM, echo remote_rsa.pub to authorized_keys
      if machine['name'] == 'remote2'
        srv.vm.provision 'file', source: 'remote_rsa.pub', 
          destination: '/home/vagrant/remote_rsa.pub'
        srv.vm.provision 'shell', 
          inline: 'cat /home/vagrant/remote_rsa.pub >> /home/vagrant/.ssh/authorized_keys'
        srv.vm.provision 'shell', inline: 'rm /home/vagrant/remote_rsa.pub'
      end # if 'remote2'
    end # config.vm.define
  end # machines.each
end # Vagrant.configure
